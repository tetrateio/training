// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountByNumberParams creates a new GetAccountByNumberParams object
// with the default values initialized.
func NewGetAccountByNumberParams() *GetAccountByNumberParams {
	var ()
	return &GetAccountByNumberParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountByNumberParamsWithTimeout creates a new GetAccountByNumberParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountByNumberParamsWithTimeout(timeout time.Duration) *GetAccountByNumberParams {
	var ()
	return &GetAccountByNumberParams{

		timeout: timeout,
	}
}

// NewGetAccountByNumberParamsWithContext creates a new GetAccountByNumberParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccountByNumberParamsWithContext(ctx context.Context) *GetAccountByNumberParams {
	var ()
	return &GetAccountByNumberParams{

		Context: ctx,
	}
}

// NewGetAccountByNumberParamsWithHTTPClient creates a new GetAccountByNumberParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccountByNumberParamsWithHTTPClient(client *http.Client) *GetAccountByNumberParams {
	var ()
	return &GetAccountByNumberParams{
		HTTPClient: client,
	}
}

/*GetAccountByNumberParams contains all the parameters to send to the API endpoint
for the get account by number operation typically these are written to a http.Request
*/
type GetAccountByNumberParams struct {

	/*Number
	  The number of the account that is to be fetched.

	*/
	Number int64
	/*Owner
	  Owner of the account

	*/
	Owner string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get account by number params
func (o *GetAccountByNumberParams) WithTimeout(timeout time.Duration) *GetAccountByNumberParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get account by number params
func (o *GetAccountByNumberParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get account by number params
func (o *GetAccountByNumberParams) WithContext(ctx context.Context) *GetAccountByNumberParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get account by number params
func (o *GetAccountByNumberParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get account by number params
func (o *GetAccountByNumberParams) WithHTTPClient(client *http.Client) *GetAccountByNumberParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get account by number params
func (o *GetAccountByNumberParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNumber adds the number to the get account by number params
func (o *GetAccountByNumberParams) WithNumber(number int64) *GetAccountByNumberParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the get account by number params
func (o *GetAccountByNumberParams) SetNumber(number int64) {
	o.Number = number
}

// WithOwner adds the owner to the get account by number params
func (o *GetAccountByNumberParams) WithOwner(owner string) *GetAccountByNumberParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the get account by number params
func (o *GetAccountByNumberParams) SetOwner(owner string) {
	o.Owner = owner
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountByNumberParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param number
	if err := r.SetPathParam("number", swag.FormatInt64(o.Number)); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
