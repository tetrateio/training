// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	model "github.com/tetrateio/training/samples/modernbank/microservices/user/pkg/model"
)

// ListAccountsOKCode is the HTTP code returned for type ListAccountsOK
const ListAccountsOKCode int = 200

/*ListAccountsOK Success!

swagger:response listAccountsOK
*/
type ListAccountsOK struct {
	/*Version of the microservice that responded

	 */
	Version string `json:"version"`

	/*
	  In: Body
	*/
	Payload []*model.Account `json:"body,omitempty"`
}

// NewListAccountsOK creates ListAccountsOK with default headers values
func NewListAccountsOK() *ListAccountsOK {

	return &ListAccountsOK{}
}

// WithVersion adds the version to the list accounts o k response
func (o *ListAccountsOK) WithVersion(version string) *ListAccountsOK {
	o.Version = version
	return o
}

// SetVersion sets the version to the list accounts o k response
func (o *ListAccountsOK) SetVersion(version string) {
	o.Version = version
}

// WithPayload adds the payload to the list accounts o k response
func (o *ListAccountsOK) WithPayload(payload []*model.Account) *ListAccountsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list accounts o k response
func (o *ListAccountsOK) SetPayload(payload []*model.Account) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAccountsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header version

	version := o.Version
	if version != "" {
		rw.Header().Set("version", version)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*model.Account, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// ListAccountsNotFoundCode is the HTTP code returned for type ListAccountsNotFound
const ListAccountsNotFoundCode int = 404

/*ListAccountsNotFound Owner not found

swagger:response listAccountsNotFound
*/
type ListAccountsNotFound struct {
	/*Version of the microservice that responded

	 */
	Version string `json:"version"`
}

// NewListAccountsNotFound creates ListAccountsNotFound with default headers values
func NewListAccountsNotFound() *ListAccountsNotFound {

	return &ListAccountsNotFound{}
}

// WithVersion adds the version to the list accounts not found response
func (o *ListAccountsNotFound) WithVersion(version string) *ListAccountsNotFound {
	o.Version = version
	return o
}

// SetVersion sets the version to the list accounts not found response
func (o *ListAccountsNotFound) SetVersion(version string) {
	o.Version = version
}

// WriteResponse to the client
func (o *ListAccountsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header version

	version := o.Version
	if version != "" {
		rw.Header().Set("version", version)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// ListAccountsInternalServerErrorCode is the HTTP code returned for type ListAccountsInternalServerError
const ListAccountsInternalServerErrorCode int = 500

/*ListAccountsInternalServerError Internal server error

swagger:response listAccountsInternalServerError
*/
type ListAccountsInternalServerError struct {
	/*Version of the microservice that responded

	 */
	Version string `json:"version"`
}

// NewListAccountsInternalServerError creates ListAccountsInternalServerError with default headers values
func NewListAccountsInternalServerError() *ListAccountsInternalServerError {

	return &ListAccountsInternalServerError{}
}

// WithVersion adds the version to the list accounts internal server error response
func (o *ListAccountsInternalServerError) WithVersion(version string) *ListAccountsInternalServerError {
	o.Version = version
	return o
}

// SetVersion sets the version to the list accounts internal server error response
func (o *ListAccountsInternalServerError) SetVersion(version string) {
	o.Version = version
}

// WriteResponse to the client
func (o *ListAccountsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header version

	version := o.Version
	if version != "" {
		rw.Header().Set("version", version)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
