// tslint:disable
/**
 * Modern Bank
 * This is the API exposed to customers of Modern Bank.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountToJSON,
} from '../models';

export interface CreateAccountRequest {
    username: string;
}

export interface ListAccountsRequest {
    username: string;
}

/**
 * no description
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Creates a new account for a given customer
     * Create a new account for a customer
     */
    async createAccountRaw(requestParameters: CreateAccountRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling createAccount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{username}/accounts`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Creates a new account for a given customer
     * Create a new account for a customer
     */
    async createAccount(requestParameters: CreateAccountRequest): Promise<Account> {
        const response = await this.createAccountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all accounts for a given customer
     * Lists all accounts for a given customer
     */
    async listAccountsRaw(requestParameters: ListAccountsRequest): Promise<runtime.ApiResponse<Array<Account>>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling listAccounts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{username}/accounts`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountFromJSON));
    }

    /**
     * Lists all accounts for a given customer
     * Lists all accounts for a given customer
     */
    async listAccounts(requestParameters: ListAccountsRequest): Promise<Array<Account>> {
        const response = await this.listAccountsRaw(requestParameters);
        return await response.value();
    }

}
