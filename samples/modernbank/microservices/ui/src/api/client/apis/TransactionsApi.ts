// tslint:disable
/**
 * Modern Bank
 * This is the API exposed to customers of Modern Bank.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Newtransaction,
    NewtransactionFromJSON,
    NewtransactionToJSON,
    Transaction,
    TransactionFromJSON,
    TransactionToJSON,
} from '../models';

export interface CreateTransactionRequest {
    body: Newtransaction;
}

export interface ListTransactionsReceivedRequest {
    receiver: number;
}

export interface ListTransactionsSentRequest {
    sender: number;
}

/**
 * no description
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Sends money from one account to another
     * Sends money from one account to another
     */
    async createTransactionRaw(requestParameters: CreateTransactionRequest): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createTransaction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewtransactionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * Sends money from one account to another
     * Sends money from one account to another
     */
    async createTransaction(requestParameters: CreateTransactionRequest): Promise<Transaction> {
        const response = await this.createTransactionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all transactions sent to a given account
     * Lists all transactions sent to a given account
     */
    async listTransactionsReceivedRaw(requestParameters: ListTransactionsReceivedRequest): Promise<runtime.ApiResponse<Array<Transaction>>> {
        if (requestParameters.receiver === null || requestParameters.receiver === undefined) {
            throw new runtime.RequiredError('receiver','Required parameter requestParameters.receiver was null or undefined when calling listTransactionsReceived.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/{receiver}/received`.replace(`{${"receiver"}}`, encodeURIComponent(String(requestParameters.receiver))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionFromJSON));
    }

    /**
     * Lists all transactions sent to a given account
     * Lists all transactions sent to a given account
     */
    async listTransactionsReceived(requestParameters: ListTransactionsReceivedRequest): Promise<Array<Transaction>> {
        const response = await this.listTransactionsReceivedRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all transactions sent from a given account
     * Lists all transactions sent from a given account
     */
    async listTransactionsSentRaw(requestParameters: ListTransactionsSentRequest): Promise<runtime.ApiResponse<Array<Transaction>>> {
        if (requestParameters.sender === null || requestParameters.sender === undefined) {
            throw new runtime.RequiredError('sender','Required parameter requestParameters.sender was null or undefined when calling listTransactionsSent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/{sender}/sent`.replace(`{${"sender"}}`, encodeURIComponent(String(requestParameters.sender))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionFromJSON));
    }

    /**
     * Lists all transactions sent from a given account
     * Lists all transactions sent from a given account
     */
    async listTransactionsSent(requestParameters: ListTransactionsSentRequest): Promise<Array<Transaction>> {
        const response = await this.listTransactionsSentRaw(requestParameters);
        return await response.value();
    }

}
