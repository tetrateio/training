// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/tetrateio/training/samples/modernbank/microservices/transaction-log/pkg/model"
)

// GetTransactionReceivedReader is a Reader for the GetTransactionReceived structure.
type GetTransactionReceivedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionReceivedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionReceivedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetTransactionReceivedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetTransactionReceivedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionReceivedOK creates a GetTransactionReceivedOK with default headers values
func NewGetTransactionReceivedOK() *GetTransactionReceivedOK {
	return &GetTransactionReceivedOK{}
}

/*GetTransactionReceivedOK handles this case with default header values.

Success!
*/
type GetTransactionReceivedOK struct {
	/*Version of the microservice that responded
	 */
	Version string

	Payload *model.Transaction
}

func (o *GetTransactionReceivedOK) Error() string {
	return fmt.Sprintf("[GET /transactions/account/{receiver}/received/{transaction}][%d] getTransactionReceivedOK  %+v", 200, o.Payload)
}

func (o *GetTransactionReceivedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header version
	o.Version = response.GetHeader("version")

	o.Payload = new(model.Transaction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionReceivedNotFound creates a GetTransactionReceivedNotFound with default headers values
func NewGetTransactionReceivedNotFound() *GetTransactionReceivedNotFound {
	return &GetTransactionReceivedNotFound{}
}

/*GetTransactionReceivedNotFound handles this case with default header values.

Transaction not found
*/
type GetTransactionReceivedNotFound struct {
	/*Version of the microservice that responded
	 */
	Version string
}

func (o *GetTransactionReceivedNotFound) Error() string {
	return fmt.Sprintf("[GET /transactions/account/{receiver}/received/{transaction}][%d] getTransactionReceivedNotFound ", 404)
}

func (o *GetTransactionReceivedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header version
	o.Version = response.GetHeader("version")

	return nil
}

// NewGetTransactionReceivedInternalServerError creates a GetTransactionReceivedInternalServerError with default headers values
func NewGetTransactionReceivedInternalServerError() *GetTransactionReceivedInternalServerError {
	return &GetTransactionReceivedInternalServerError{}
}

/*GetTransactionReceivedInternalServerError handles this case with default header values.

Internal server error
*/
type GetTransactionReceivedInternalServerError struct {
	/*Version of the microservice that responded
	 */
	Version string
}

func (o *GetTransactionReceivedInternalServerError) Error() string {
	return fmt.Sprintf("[GET /transactions/account/{receiver}/received/{transaction}][%d] getTransactionReceivedInternalServerError ", 500)
}

func (o *GetTransactionReceivedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header version
	o.Version = response.GetHeader("version")

	return nil
}
