// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTransactionSentHandlerFunc turns a function with the right signature into a get transaction sent handler
type GetTransactionSentHandlerFunc func(GetTransactionSentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransactionSentHandlerFunc) Handle(params GetTransactionSentParams) middleware.Responder {
	return fn(params)
}

// GetTransactionSentHandler interface for that can handle valid get transaction sent params
type GetTransactionSentHandler interface {
	Handle(GetTransactionSentParams) middleware.Responder
}

// NewGetTransactionSent creates a new http.Handler for the get transaction sent operation
func NewGetTransactionSent(ctx *middleware.Context, handler GetTransactionSentHandler) *GetTransactionSent {
	return &GetTransactionSent{Context: ctx, Handler: handler}
}

/*GetTransactionSent swagger:route GET /transactions/account/{sender}/sent/{transaction} transactions getTransactionSent

Get a specific transaction sent from a given account

Get a specific transaction sent from a given account

*/
type GetTransactionSent struct {
	Context *middleware.Context
	Handler GetTransactionSentHandler
}

func (o *GetTransactionSent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTransactionSentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
